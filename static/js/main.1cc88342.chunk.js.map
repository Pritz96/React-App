{"version":3,"sources":["components/static/blueRing.png","components/static/controllerCoaster.png","components/static/inceptionTotem.png","components/static/spinner.jpg","components/static/pocketWatch.jpg","components/static/tanjiro.jpg","components/Images.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","gridList","width","height","transform","titleBar","background","icon","color","AdvancedGridList","classes","tileData","img","blueRing","title","featured","message","controllerCoaster","inceptionTotem","spinner","pocketWatch","tanjiro","className","Typography","variant","GridList","cellHeight","spacing","cols","map","tile","GridListTile","key","rows","src","alt","GridListTileBar","titlePosition","actionPosition","actionIcon","IconButton","onClick","alert","TabPanel","props","children","value","index","other","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","LinkTab","Tab","event","preventDefault","flexGrow","indicator","NavTabs","React","useState","setValue","AppBar","position","style","Tabs","indicatorclassname","bigIndicator","onChange","newValue","aria-label","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1cc88342.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blueRing.9d2029a3.png\";","module.exports = __webpack_public_path__ + \"static/media/controllerCoaster.8fde5954.png\";","module.exports = __webpack_public_path__ + \"static/media/inceptionTotem.73fc2b94.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.4136e747.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pocketWatch.ee53c972.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tanjiro.ded090a9.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport blueRing from './static/blueRing.png';\nimport controllerCoaster from './static/controllerCoaster.png';\nimport inceptionTotem from './static/inceptionTotem.png';\nimport spinner from './static/spinner.jpg'\nimport pocketWatch from './static/pocketWatch.jpg'\nimport tanjiro from './static/tanjiro.jpg'\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    backgroundColor: '#E5E4E2'\n  },\n  gridList: {\n    width: 1110,\n    height: 1300,\n\n    transform: 'translateZ(0)',\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n  icon: {\n    color: 'white',\n  },\n}));\n\n\nexport default function AdvancedGridList() {\n\n  const classes = useStyles();\n  const tileData = [\n    {\n      img: blueRing,\n      title: 'Layered Veneer Ring',\n      featured: false,\n      message:\"I made a ring by boiling veneer, then curling and gluing it around a pen. After building up layers to add the darker shades of veneer and the blue veneer I sealed it with clear varnish\"\n    },\n    {\n      img: controllerCoaster,\n      title: 'Controller Coaster',\n      featured: false,\n      message:\"I made a two-tone games controller tea coaster\"\n      },\n    {\n      img: inceptionTotem,\n      title: 'Inception Totem',\n      featured: false,\n      message:\"I like Inception and the totems used in the film so I carved my own totem using wood from my apple tree\"\n    },\n    {\n      img: spinner,\n      title: 'Ninjas in Pyjamas Spinner',\n      featured: false,\n      message:\"I like video games and esports, one of the teams I like is Ninjas in Pyjamas\"\n    },\n    {\n      img: pocketWatch,\n      title: 'Pocket Watch',\n      featured: false,\n      message:\"I made a pocket watch\"\n    },\n    {\n      img: tanjiro,\n      title: 'Tanjiro Drawing',\n      featured: false,\n      message:\"I rarely draw but decided to draw Tanjiro from Demon Slayer after watching the series\"\n    }\n  ];\nfunction clickHandler(message){\n  alert(message);\n}\n  return (\n    <div className={classes.root}>\n    <Typography variant=\"h4\">\n      Gallery\n      <GridList cellHeight={400} spacing={3} className={classes.gridList} cols={2}>\n        {tileData.map(tile => (\n          <GridListTile key={tile.img} cols={tile.featured ? 2 : 1} rows={tile.featured ? 2 : 1}>\n            <img src={tile.img} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              titlePosition=\"top\"\n              actionPosition=\"left\"\n              className={classes.titleBar}\n              actionIcon={\n                <IconButton className={classes.icon} onClick={()=>clickHandler(tile.message)}>\n                  <InfoIcon/>\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      </Typography>\n    </div>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AdvancedGridList from './Images'\nimport BrushIcon from '@material-ui/icons/Brush';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport VideogameAssetIcon from '@material-ui/icons/VideogameAsset';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`nav-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `nav-tab-${index}`,\n    'aria-controls': `nav-tabpanel-${index}`,\n  };\n}\n\nfunction LinkTab(props) {\n  return (\n    <Tab\n      component=\"a\"\n      onClick={event => {\n        event.preventDefault();\n      }}\n      {...props}\n    />\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"#E5E4E2\",\n  },\n  indicator: {\n    backgroundColor: 'white',\n    height: '5px'\n  },\n}));\n\nexport default function NavTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ backgroundColor: '#696969' }}>\n        <Tabs\n          indicatorclassname={classes.bigIndicator}\n          variant=\"fullWidth\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"nav tabs example\"\n          classes={{\n          indicator: classes.indicator\n          \n          }}\n        >\n          <LinkTab label=\"Art\" icon={<BrushIcon />}  {...a11yProps(0)} />\n          <LinkTab label=\"Games\" icon={<VideogameAssetIcon />} {...a11yProps(1)} />\n          <LinkTab label=\"Apps\" icon={<AppsIcon />} {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n      <AdvancedGridList />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        Page Two\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        Page Three\n      </TabPanel>\n    </div>\n  );\n}","import React from 'react';\nimport NavTabs from './components/NavBar'\n\nfunction App() {\n  return (\n    <div>\n    <NavTabs />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}